package ch.salon.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StandAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStandAllPropertiesEquals(Stand expected, Stand actual) {
        assertStandAutoGeneratedPropertiesEquals(expected, actual);
        assertStandAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStandAllUpdatablePropertiesEquals(Stand expected, Stand actual) {
        assertStandUpdatableFieldsEquals(expected, actual);
        assertStandUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStandAutoGeneratedPropertiesEquals(Stand expected, Stand actual) {
        assertThat(expected)
            .as("Verify Stand auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStandUpdatableFieldsEquals(Stand expected, Stand actual) {
        assertThat(expected)
            .as("Verify Stand relevant properties")
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getNbMeal1()).as("check nbMeal1").isEqualTo(actual.getNbMeal1()))
            .satisfies(e -> assertThat(e.getNbMeal2()).as("check nbMeal2").isEqualTo(actual.getNbMeal2()))
            .satisfies(e -> assertThat(e.getNbMeal3()).as("check nbMeal3").isEqualTo(actual.getNbMeal3()))
            .satisfies(e -> assertThat(e.getShared()).as("check shared").isEqualTo(actual.getShared()))
            .satisfies(e -> assertThat(e.getNbTable()).as("check nbTable").isEqualTo(actual.getNbTable()))
            .satisfies(e -> assertThat(e.getNbChair()).as("check nbChair").isEqualTo(actual.getNbChair()))
            .satisfies(e -> assertThat(e.getNeedElectricity()).as("check needElectricity").isEqualTo(actual.getNeedElectricity()))
            .satisfies(e -> assertThat(e.getAcceptedChart()).as("check acceptedChart").isEqualTo(actual.getAcceptedChart()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStandUpdatableRelationshipsEquals(Stand expected, Stand actual) {
        assertThat(expected)
            .as("Verify Stand relationships")
            .satisfies(e -> assertThat(e.getExponent()).as("check exponent").isEqualTo(actual.getExponent()))
            .satisfies(e -> assertThat(e.getSalon()).as("check salon").isEqualTo(actual.getSalon()))
            .satisfies(e -> assertThat(e.getDimension()).as("check dimension").isEqualTo(actual.getDimension()));
    }
}
