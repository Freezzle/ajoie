package ch.salon.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ExponentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExponentAllPropertiesEquals(Exponent expected, Exponent actual) {
        assertExponentAutoGeneratedPropertiesEquals(expected, actual);
        assertExponentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExponentAllUpdatablePropertiesEquals(Exponent expected, Exponent actual) {
        assertExponentUpdatableFieldsEquals(expected, actual);
        assertExponentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExponentAutoGeneratedPropertiesEquals(Exponent expected, Exponent actual) {
        assertThat(expected)
            .as("Verify Exponent auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExponentUpdatableFieldsEquals(Exponent expected, Exponent actual) {
        assertThat(expected)
            .as("Verify Exponent relevant properties")
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getFullName()).as("check fullName").isEqualTo(actual.getFullName()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()))
            .satisfies(e -> assertThat(e.getWebsite()).as("check website").isEqualTo(actual.getWebsite()))
            .satisfies(e -> assertThat(e.getSocialMedia()).as("check socialMedia").isEqualTo(actual.getSocialMedia()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getNpaLocalite()).as("check npaLocalite").isEqualTo(actual.getNpaLocalite()))
            .satisfies(e -> assertThat(e.getUrlPicture()).as("check urlPicture").isEqualTo(actual.getUrlPicture()))
            .satisfies(e -> assertThat(e.getComment()).as("check comment").isEqualTo(actual.getComment()))
            .satisfies(e -> assertThat(e.getBlocked()).as("check blocked").isEqualTo(actual.getBlocked()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExponentUpdatableRelationshipsEquals(Exponent expected, Exponent actual) {}
}
